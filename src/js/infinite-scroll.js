let  infScroll  =  new  InfiniteScroll (  '.container',  { 
    // указаны значения по умолчанию
  
    path: undefined, 
    // ОБЯЗАТЕЛЬНО. Определяет URL-адрес для следующей страницы 
    // Установите значение строки селектора для использования href ссылки на следующую страницу 
    // путь: '.pagination__next' 
    // Или установите с помощью {{#}} вместо номера страницы в URL-адресе 
    // path: '/ blog / page / {{#}}' 
    // или задается функцией 
    // path: function () { 
    // return return '/ article / P' + ((this.loadCount + 1) * 10 ); 
    //}
  
    append: undefined, 
    // ТРЕБУЕТСЯ для добавления содержимого 
    // Добавляет выбранные элементы с загруженной страницы в контейнер
  
    checkLastPage: true, 
    // Проверяет, есть ли на странице элемент селектора пути 
    // Устанавливается в строку, если путь не задан как строка селектора: 
    // checkLastPage: '.pagination__next'
  
    prefill: false, 
    // Загружает и добавляет страницы при инициализации, пока не будет выполнено требование прокрутки.
  
    responseBody: 'text', 
    // Устанавливает метод, используемый в ответе. 
    // Установите json для загрузки JSON.
  
    domParseResponse: true, 
    // разрешает синтаксический анализ тела ответа в DOM 
    // запрещает загрузку плоского текста
  
    fetchOptions: undefined, 
    // устанавливает пользовательские настройки для запроса fetch () 
    // для установки заголовков, cors или метод POST 
    // может быть установлен для объекта или функции, которая возвращает объект
  
    outlayer: false, 
    // Интегрирует Masonry, Isotope или Packery 
    // Добавленные элементы будут добавлены в макет
  
    scrollThreshold: 400, 
    // Устанавливает расстояние между областью просмотра и областью прокрутки 
    // для срабатывания события scrollThreshold.
  
    elementScroll: false, 
    // Устанавливает скроллер на элемент для прокрутки элемента переполнения
  
    loadOnScroll: true, 
    // Загружает следующую страницу, когда прокрутка пересекает scrollThreshold
  
    history: 'replace', 
    // Изменяет историю браузера и URL. 
    // Установите значение 'push', чтобы использовать history.pushState () 
    // для создания новых записей в истории при каждом изменении страницы.
  
    historyTitle: true, 
    // Обновляет заголовок окна. Требуется включенная история.
  
    hideNav: undefined, 
    // Скрывает элемент навигации
  
    status: undefined, 
    // Отображает элементы состояния, указывающие состояние загрузки страницы: 
    // .infinite-scroll-request, .infinite-scroll-load, .infinite-scroll-error 
    // status: '.page-load-status'
  
    button: undefined, 
    // Разрешает кнопке загружать страницы при нажатии 
    // button: '.load-next-button'
  
    onInit: undefined, 
    // вызывается при инициализации 
    // полезно для привязки событий к init 
    // onInit: function () { 
    // this.on ('append', function () {...}) 
    //}
  
    debug: false, 
    // Записывает события и изменения состояния в консоль. 
  } );